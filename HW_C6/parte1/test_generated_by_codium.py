# Generated by Qodo Gen
from HW_C6.CAP06_CHALLENGE.parte1.func import es_primo


import pytest


class TestEsPrimo:

    # Returns True for prime numbers like 2, 3, 5, 7
    def test_returns_true_for_prime_numbers(self):
        assert es_primo(2) is True
        assert es_primo(3) is True
        assert es_primo(5) is True
        assert es_primo(7) is True

    # Raises TypeError for boolean inputs
    def test_raises_typeerror_for_boolean_inputs(self):
        with pytest.raises(TypeError):
            es_primo(True)
        with pytest.raises(TypeError):
            es_primo(False)

    # Handles edge case of smallest non-prime number 1 correctly
    def test_returns_false_for_number_one(self):
        assert es_primo(1) is False

    # Correctly processes very large integers
    def test_large_prime_number(self):
        large_prime = 9999999967
        assert es_primo(large_prime) is True

    # Handles edge case of smallest prime number 2 correctly
    def test_handles_smallest_prime_number(self):
        assert es_primo(2) is True

    # Returns False for negative float inputs
    def test_returns_false_for_negative_float_inputs(self):
        assert es_primo(-2.0) is False
        assert es_primo(-3.5) is False

    # Handles large non-prime numbers efficiently
    def test_large_non_prime_number(self):
        assert es_primo(100000000) is False

    # Correctly handles negative integer inputs as non-prime
    def test_negative_integers_as_non_prime(self):
        assert es_primo(-1) is False
        assert es_primo(-2) is False
        assert es_primo(-10) is False

    # Raises TypeError for None input
    def test_raises_typeerror_for_none_input(self):
        with pytest.raises(TypeError):
            es_primo(None)

    # Raises TypeError for list inputs
    def test_raises_typeerror_for_list_input(self):
        with pytest.raises(TypeError):
            es_primo([1, 2, 3])

    # Raises TypeError for string inputs
    def test_raises_typeerror_for_string_input(self):
        with pytest.raises(TypeError):
            es_primo("string")

    # Works efficiently for large prime numbers
    def test_large_prime_number(self):
        assert es_primo(104729) is True  # 104729 is the 10000th prime number

    # Correctly identifies 0 and 1 as non-prime
    def test_identifies_zero_and_one_as_non_prime(self):
        assert es_primo(0) is False
        assert es_primo(1) is False

    # Handles small floating-point precision errors correctly by rounding
    def test_handles_floating_point_precision(self):
        assert es_primo(2.000000001) is True
        assert es_primo(3.000000001) is True
        assert es_primo(4.999999999) is True
        assert es_primo(5.000000001) is True

    # Returns False for non-prime numbers like 4, 6, 8, 9
    def test_returns_false_for_non_prime_numbers(self):
        assert es_primo(4) is False
        assert es_primo(6) is False
        assert es_primo(8) is False
        assert es_primo(9) is False
